#!/usr/bin/env python3

import http.server
import json
import pyfair
import io
import matplotlib.pyplot as plt
import urllib.parse as urlparse

class Handler(http.server.BaseHTTPRequestHandler):

    def load_model(self, name, model_spec):
        model = pyfair.FairModel(name=name, n_simulations=10_000)
        model.bulk_import_data(model_spec)
        model.calculate_all()
        return model
        
    def distribution(self, name, model_spec):
        model = self.load_model(name, model_spec)

        dc = pyfair.report.distribution.FairDistributionCurve(model)
        fig, ax = dc.generate_image()

        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        ilen = buf.tell()
        buf.seek(0)
        data = buf.read(ilen)

        return data

    def exceedence(self, name, model_spec):
        model = self.load_model(name, model_spec)

        dc = pyfair.report.exceedence.FairExceedenceCurves(model)
        fig, ax = dc.generate_image()

        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        ilen = buf.tell()
        buf.seek(0)
        data = buf.read(ilen)

        return data

    def __init__(self, request, client_address, server):
        print("Handler __init__");
        super().__init__(request, client_address, server)
        
    def do_GET(self):

        try:
            o = urlparse.urlparse(self.path)
            parms = urlparse.parse_qs(o.query)
            print(o)
            print(parms)
            report = parms["report"][0]
            model = json.loads(parms["model"][0])

            if report == "exceedence":
                image = self.exceedence("Basic model", model)
            elif report == "distribution":
                image = self.distribution("Basic model", model)
            else:
                raise RuntimeError("Report %s not known" % report)

            self.send_response(200)
            self.send_header("Content-Length", len(image))
            self.send_header("Content-Type", "image/png")
            self.end_headers()
            self.wfile.write(image)

        except Exception as e:
            print(e)

    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        in_data = self.rfile.read(content_length)
        print("POST")
        in_params = json.loads(in_data)

        try:

            if in_params["report"] == "exceedence":
                image = self.exceedence("Basic model", in_params["model"])
            elif in_params["report"] == "distribution":
                image = self.distribution("Basic model", in_params["model"])
            else:
                raise RuntimeError("Report %s not known" % in_params["report"])

            self.send_response(200)
            self.send_header("Content-Length", len(image))
            self.send_header("Content-Type", "image/png")
            self.end_headers()
            self.wfile.write(image)

        except Exception as e:
            print(e)

srv = http.server.HTTPServer(("", 9876), Handler)
srv.serve_forever()

