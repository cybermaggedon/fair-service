#!/usr/bin/env python3

import http.server
import json
import pyfair
import urllib.parse as urlparse
import traceback
import fair
import sys

class Handler(http.server.BaseHTTPRequestHandler):

    def distribution(self, model_spec):
        all = {}
        model = fair.load_model(model_spec, all)
        model.calculate_all()
        return fair.distribution_image(all)

    def exceedence(self, model_spec):
        all = {}
        model = fair.load_model(model_spec, all)
        model.calculate_all()
        return fair.exceedence_image(all)

    def summary(self, model_spec):
        all = {}
        model = fair.load_model(model_spec, all)
        model.calculate_all()
        summary = fair.summary(model)
        return summary.to_json(indent=4).encode('utf-8'), "application/json"

    def results(self, model_spec):
        all = {}
        model = fair.load_model(model_spec, all)
        model.calculate_all()

        res = model.export_results()
        # The meta model has results called 'Risk' instead of the
        # overall model's name.
        r = {}
        for k in res:
            if k == "Risk":
                r[model._name] = res[k]
            else:
                r[k] = res[k]

        r = {
            k: r[k].values.tolist()
            for k in r
        }

        r = json.dumps(r, indent=4).encode('utf-8')

        return r, "application/json"

    def __init__(self, request, client_address, server):
        super().__init__(request, client_address, server)

    def invoke(self, report, model):

        if report == "exceedence":
            data, type = self.exceedence(model)
        elif report == "distribution":
            data, type = self.distribution(model)
        elif report == "summary":
            data, type = self.summary(model)
        elif report == "results":
            data, type = self.results(model)
        else:
            raise RuntimeError("Report %s not known" % report)
        
        self.send_response(200)
        self.send_header("Content-Length", len(data))
        self.send_header("Content-Type", type)
        self.end_headers()
        self.wfile.write(data)
        
    def do_GET(self):

        if self.path == '/favicon.ico':
            self.send_response(400)
            self.send_header("Content-Length", 0)
            self.send_header("Content-Type", "text/plain")
            self.end_headers()
            return

        print(self.path)

        try:
            components = urlparse.urlparse(self.path)
            params = urlparse.parse_qs(components.query)
            print(params.keys())
            report = params["report"][0]
            model = json.loads(params["model"][0])
            return self.invoke(report, model)

        except Exception as e:
            print(repr(e))

    def do_POST(self):

        try:
            content_length = int(self.headers['Content-Length'])
            data = self.rfile.read(content_length)
            params = json.loads(data)

            return self.invoke(params["report"], params["model"])

        except Exception as e:
            print(repr(e))

if len(sys.argv) <= 1:
    port=8080
else:
    port=int(sys.argv[1])

srv = http.server.HTTPServer(("", port), Handler)
srv.serve_forever()

